})
}
if(method == "chisq.m"){
comparison <- apply(x, 1, function(x){
m <- data.frame(x, centroid)
m = apply(m, 2, function(x) x/sum(x))
sqrt(sum((1/(x+centroid))*((m[,1]-m[,2])^2)))
})
}
if(method == "chisq.d"){
comparison <- apply(x, 1, function(x){
m <- data.frame(x, centroid)
m = apply(m, 2, function(x) x/sum(x))
sqrt(sum((1/(x+centroid))*((m[,1]-m[,2])^2)))*sqrt(sum(x)+sum(centroid))
})
}
if(method == "hellinger"){
comparison <- apply(x, 1, function(x){
m <- data.frame(x, centroid)
m = apply(m, 2, function(x) x/sum(x))
sqrt(sum((sqrt(m[,1])-sqrt(m[,2]))^2))
})
}
if(method == "braycurtis"){
comparison <- apply(x, 1, function(x){
1-(sum(abs(x-centroid))/sum(x+centroid))
})
}
if(method == "morisita"){
comparison <- apply(x, 1, function(x){
(2*sum(x*centroid))/(((sum(x*(x-1))/(sum(x)*(sum(x)-1)))+(sum(centroid*(centroid-1))/(sum(centroid)*(sum(centroid)-1))))*sum(x)*sum(centroid))
})
}
if(method == "manhattan"){
comparison <- apply(x, 1, function(x){
sum(abs(x-centroid))
})
}
if(method == "manhattan.pc"){
comparison <- apply(x, 1, function(x){
m <- data.frame(x, centroid)
m = apply(m, 2, function(x) x/sum(x))
sum(abs(m[,1]-m[,2]))
})
}
if(method == "canberra"){
comparison <- apply(x, 1, function(x){
x = ifelse((x==0), 0, 1)
y = ifelse((centroid==0), 0, 1)
m <- data.frame(x, centroid)
sum((abs(m[,1]-m[,2]))/(m[,1]+m[,2]))*(1/((sum(ifelse(((x)<1), 0, 1)))+(sum(ifelse(((y)<1), 0, 1)))-sum(ifelse(((x+y)<2), 0, 1))))
})
}
if(method == "renkonen"){
comparison <- apply(x, 1, function(x){
m <- data.frame(x, centroid)
m = apply(m, 2, function(x) x/sum(x))
sum(apply(m, 1, min))
})
}
if(method == "nxratio"){
comparison <- apply(x, 1, function(x){
mean(apply(data.frame(x, centroid), 1, function(x) min(x)/max(x)), na.rm = T)
})
}
if(method == "nxratio.pc"){
comparison <- apply(x, 1, function(x){
m <- data.frame(x, centroid)
m = apply(m, 2, function(x) x/sum(x))
mean(apply(m, 1, function(x) min(x)/max(x)), na.rm = T)
})
}
return(comparison)
}
as.data.frame(centered.comparison(data, "nxratio.pc"))
as.data.frame(centered.comparison(data, "nxratio"))
as.data.frame(centered.comparison(x, "nxratio.pc"))
as.data.frame(centered.comparison(x, "nxratio"))
centered.comparison <- function(x, method = "eudist"){
centroid <- as.data.frame(apply(x, 2, mean))
if(method == "jaccard"){
comparison <- apply(x, 1, function(x) {
x = ifelse((x==0), 0, 1)
y = ifelse((centroid==0), 0, 1)
sum(ifelse(((x+y)<2), 0, 1))/((sum(ifelse(((x)<1), 0, 1)))+(sum(ifelse(((y)<1), 0, 1)))-sum(ifelse(((x+y)<2), 0, 1)))
})
}
if(method == "sorensen"){
comparison <- apply(x, 1, function(x) {
x = ifelse((x == 0), 0, 1)
y = ifelse((centroid == 0), 0, 1)
c <- sum(ifelse(((x + y)<2), 0, 1))
2*c/((sum(ifelse(((x) < 1), 0, 1)))+(sum(ifelse(((y) < 1), 0, 1))))
})
}
if(method == "euclidian"){
comparison <- apply(x, 1, function(x) {
m <- data.frame(x, centroid)
sqrt(sum((m[,1]-m[,2])^2))
})
}
if(method == "sqeudist"){
comparison <- apply(x, 1, function(x) {
m <- data.frame(x, centroid)
m = apply(m, 2, function(x) x/sum(x))
1-sum((m[,1]-m[,2])^2)
})
}
if(method == "chord"){
comparison <- apply(x, 1, function(x) {
sqrt(sum(((x/sqrt(sum(x^2)))-(centroid/sqrt(sum(centroid^2))))^2))
})
}
if(method == "chisq.m"){
comparison <- apply(x, 1, function(x){
m <- data.frame(x, centroid)
m = apply(m, 2, function(x) x/sum(x))
sqrt(sum((1/(x+centroid))*((m[,1]-m[,2])^2)))
})
}
if(method == "chisq.d"){
comparison <- apply(x, 1, function(x){
m <- data.frame(x, centroid)
m = apply(m, 2, function(x) x/sum(x))
sqrt(sum((1/(x+centroid))*((m[,1]-m[,2])^2)))*sqrt(sum(x)+sum(centroid))
})
}
if(method == "hellinger"){
comparison <- apply(x, 1, function(x){
m <- data.frame(x, centroid)
m = apply(m, 2, function(x) x/sum(x))
sqrt(sum((sqrt(m[,1])-sqrt(m[,2]))^2))
})
}
if(method == "braycurtis"){
comparison <- apply(x, 1, function(x){
1-(sum(abs(x-centroid))/sum(x+centroid))
})
}
if(method == "morisita"){
comparison <- apply(x, 1, function(x){
(2*sum(x*centroid))/(((sum(x*(x-1))/(sum(x)*(sum(x)-1)))+(sum(centroid*(centroid-1))/(sum(centroid)*(sum(centroid)-1))))*sum(x)*sum(centroid))
})
}
if(method == "manhattan"){
comparison <- apply(x, 1, function(x){
sum(abs(x-centroid))
})
}
if(method == "manhattan.pc"){
comparison <- apply(x, 1, function(x){
m <- data.frame(x, centroid)
m = apply(m, 2, function(x) x/sum(x))
sum(abs(m[,1]-m[,2]))
})
}
if(method == "canberra"){
comparison <- apply(x, 1, function(x){
x = ifelse((x==0), 0, 1)
y = ifelse((centroid==0), 0, 1)
m <- data.frame(x, centroid)
sum((abs(m[,1]-m[,2]))/(m[,1]+m[,2]))*(1/((sum(ifelse(((x)<1), 0, 1)))+(sum(ifelse(((y)<1), 0, 1)))-sum(ifelse(((x+y)<2), 0, 1))))
})
}
if(method == "renkonen"){
comparison <- apply(x, 1, function(x){
m <- data.frame(x, centroid)
m = apply(m, 2, function(x) x/sum(x))
sum(apply(m, 1, min))
})
}
if(method == "nxratio"){
comparison <- apply(x, 1, function(x){
mean(apply(data.frame(x, centroid), 1, function(x) min(x)/max(x)), na.rm = T)
})
}
if(method == "nxratio.pc"){
comparison <- apply(x, 1, function(x){
m <- data.frame(x, centroid)
m = apply(m, 2, function(x) x/sum(x))
mean(apply(m, 1, function(x) min(x)/max(x)), na.rm = T)
})
}
if(method == "log.sorensen"){
comparison <- apply(x, 1, function(x){
2*sum(apply(data.frame(x, centroid), 1, function(x) ifelse((min(x)==0|min(x)==0&max(x)==0), 0, log(min(x)+1)/log(max(x)+1))))/
((sum(ifelse(((x)==0), 0, 1)))+(sum(ifelse(((centroid)==0), 0, 1))))
})
}
return(comparison)
}
as.data.frame(centered.comparison(data, "log.sorensen"))
centered.comparison(data, "log.sorensen")
sd(centered.comparison(data, "log.sorensen"))
sd(centered.comparison(data, "log.sorensen"))/mean(centered.comparison(data, "log.sorensen"))
sd(centered.comparison(data, "log.sorensen"))*100/mean(centered.comparison(data, "log.sorensen"))
check <- function(x, data){
return(list(sd(centered.comparison(data, x))*100/mean(centered.comparison(data, x)), min(centered.comparison(data, x)), max(centered.comparison(data, x))))
}
check("jaccard", data)
check("sorensen", data)
check("sqeudist", data)
check("braycurtis", data)
check("morisita", data)
check("renkonen", data)
check("nxratio", data)
check("nxratio.pc", data)
check("log.sorensen", data)
check("euclidian", data)
check("chord", data)
check("chisq.m", data)
check("chisq.d", data)
check("hellinger", data)
check("manhattan", data)
check("manhattan.pc", data)
check("canberra", data)
library(ancends)
library(ancends)
sd(c(135, 68, 63, 29, 39, 113, 10, 53))
mean(c(135, 68, 63, 29, 39, 113, 10, 53))
sd(c(135, 68, 63, 29, 39, 113, 10, 53))/sqrt(8)
citation()
library(ancends)
paired.comparison(winter_birds)
library(ggplot2)
geom_violin()+coord_flip()
geom_violin() + coord_flip()
simpson <- function(data, mode = "Biased"){
if(mode == "Biased"){
if(is.null(ncol(data))==F){
return(apply(data, 2, function(data) (1-sum((data/sum(data))^2))))
}
if(is.null(ncol(data))==T){
return(1-sum((data/sum(data))^2))
}
}
if(mode == "Unbiased"){
if(is.null(ncol(data))==F){
return(apply(data, 2, function(data) (1-(sum(data*(data-1)))/(sum(data)*(sum(data)-1)))))
}
if(is.null(ncol(data))==T){
return(1-(sum(data*(data-1)))/(sum(data)*(sum(data)-1)))
}
}
}
library(ancends)
library(ancends)
simpson
pie(c(1,2,3,4))
ancends::pie
hills
234%%1
install.packages("qpdf")
library(ancends)
remove(simpson())
remove(simpson)
library(qpdf)
hills
shannon
shannon <- function(data, mode = "Biased", log.base, std = FALSE){
if(mode == "Biased"){
if(is.null(ncol(data))==F){
if(missing(log.base)){
H <- apply(data, 2, function(x) -sum((x[x>0]/sum(x))*log(x[x>0]/sum(x))))
}else{
H <- apply(data, 2, function(x) -sum((x[x>0]/sum(x))*log((x[x>0]/sum(x)), log.base)))
}
}
if(is.null(ncol(data))==T){
if(missing(log.base)){
H <- -sum((data[data>0]/sum(data))*log(data[data>0]/sum(data)))
}else{
H <- -sum((data[data>0]/sum(data))*log((data[data>0]/sum(data)), log.base))
}
}
}
if(mode == "Unbiased"){
if(is.null(ncol(data))==F){
if(missing(log.base)){
H <- apply(data, 2, function(x) (-sum((x[x>0]/sum(x))*log(x[x>0]/sum(x))))-((length(x[x>0])-1)/(2*sum(x))))
}else{
H <- apply(data, 2, function(x) (-sum((x[x>0]/sum(x))*log((x[x>0]/sum(x)), log.base)))-((length(x[x>0])-1)/(2*sum(x))))
}
}
if(is.null(ncol(data))==T){
if(missing(log.base)){
H <- (-sum((data[data>0]/sum(data))*log(data[data>0]/sum(data))))-((length(data[data>0])-1)/(2*sum(data)))
}else{
H <- (-sum((data[data>0]/sum(data))*log((data[data>0]/sum(data)), log.base)))-((length(data[data>0])-1)/(2*sum(data)))
}
}
}
if (std == F){
return(H)
}else{
if (length(H) > 1){
S <- apply(data, 2, function(x) sum(x > 0 | !is.na(x)))
}else{
S <- sum(x > 0 | !is.na(x))
}
if (missing(log.base)){
return(H/log(S))
}else{
return(H/log(S, base = log.base))
}
}
}
shannon(c(1, 2, 3, 4))
shannon(c(1, 2, 3, 4, 0))
shannon(c(1, 2, 3, 4, 0), std = T)
shannon <- function(data, mode = "Biased", log.base, std = FALSE){
if(mode == "Biased"){
if(is.null(ncol(data))==F){
if(missing(log.base)){
H <- apply(data, 2, function(x) -sum((x[x>0]/sum(x))*log(x[x>0]/sum(x))))
}else{
H <- apply(data, 2, function(x) -sum((x[x>0]/sum(x))*log((x[x>0]/sum(x)), log.base)))
}
}
if(is.null(ncol(data))==T){
if(missing(log.base)){
H <- -sum((data[data>0]/sum(data))*log(data[data>0]/sum(data)))
}else{
H <- -sum((data[data>0]/sum(data))*log((data[data>0]/sum(data)), log.base))
}
}
}
if(mode == "Unbiased"){
if(is.null(ncol(data))==F){
if(missing(log.base)){
H <- apply(data, 2, function(x) (-sum((x[x>0]/sum(x))*log(x[x>0]/sum(x))))-((length(x[x>0])-1)/(2*sum(x))))
}else{
H <- apply(data, 2, function(x) (-sum((x[x>0]/sum(x))*log((x[x>0]/sum(x)), log.base)))-((length(x[x>0])-1)/(2*sum(x))))
}
}
if(is.null(ncol(data))==T){
if(missing(log.base)){
H <- (-sum((data[data>0]/sum(data))*log(data[data>0]/sum(data))))-((length(data[data>0])-1)/(2*sum(data)))
}else{
H <- (-sum((data[data>0]/sum(data))*log((data[data>0]/sum(data)), log.base)))-((length(data[data>0])-1)/(2*sum(data)))
}
}
}
if (std == F){
return(H)
}else{
if (length(H) > 1){
S <- apply(data, 2, function(x) sum(x > 0 | !is.na(x)))
}else{
S <- sum(S > 0 | !is.na(S))
}
if (missing(log.base)){
return(H/log(S))
}else{
return(H/log(S, base = log.base))
}
}
}
shannon(c(1, 2, 3, 4, 0), std = T)
shannon <- function(data, mode = "Biased", log.base, std = FALSE){
if(mode == "Biased"){
if(is.null(ncol(data))==F){
if(missing(log.base)){
H <- apply(data, 2, function(x) -sum((x[x>0]/sum(x))*log(x[x>0]/sum(x))))
}else{
H <- apply(data, 2, function(x) -sum((x[x>0]/sum(x))*log((x[x>0]/sum(x)), log.base)))
}
}
if(is.null(ncol(data))==T){
if(missing(log.base)){
H <- -sum((data[data>0]/sum(data))*log(data[data>0]/sum(data)))
}else{
H <- -sum((data[data>0]/sum(data))*log((data[data>0]/sum(data)), log.base))
}
}
}
if(mode == "Unbiased"){
if(is.null(ncol(data))==F){
if(missing(log.base)){
H <- apply(data, 2, function(x) (-sum((x[x>0]/sum(x))*log(x[x>0]/sum(x))))-((length(x[x>0])-1)/(2*sum(x))))
}else{
H <- apply(data, 2, function(x) (-sum((x[x>0]/sum(x))*log((x[x>0]/sum(x)), log.base)))-((length(x[x>0])-1)/(2*sum(x))))
}
}
if(is.null(ncol(data))==T){
if(missing(log.base)){
H <- (-sum((data[data>0]/sum(data))*log(data[data>0]/sum(data))))-((length(data[data>0])-1)/(2*sum(data)))
}else{
H <- (-sum((data[data>0]/sum(data))*log((data[data>0]/sum(data)), log.base)))-((length(data[data>0])-1)/(2*sum(data)))
}
}
}
if (std == F){
return(H)
}else{
if (length(H) > 1){
S <- apply(data, 2, function(x) sum(x > 0 | !is.na(x)))
}else{
S <- sum(data > 0 | !is.na(data))
}
if (missing(log.base)){
return(H/log(S))
}else{
return(H/log(S, base = log.base))
}
}
}
shannon(c(1, 2, 3, 4, 0), std = T)
shannon(c(1, 2, 3, 4, 0), std = T)
shannon(c(1, 2, 3, 4), std = T)
shannon(c(1, 2, 3, 4, NA), std = T)
sum(c(1, 2, 3, 4, 0) > 0)
shannon <- function(data, mode = "Biased", log.base, std = FALSE){
if(mode == "Biased"){
if(is.null(ncol(data))==F){
if(missing(log.base)){
H <- apply(data, 2, function(x) -sum((x[x>0]/sum(x))*log(x[x>0]/sum(x))))
}else{
H <- apply(data, 2, function(x) -sum((x[x>0]/sum(x))*log((x[x>0]/sum(x)), log.base)))
}
}
if(is.null(ncol(data))==T){
if(missing(log.base)){
H <- -sum((data[data>0]/sum(data))*log(data[data>0]/sum(data)))
}else{
H <- -sum((data[data>0]/sum(data))*log((data[data>0]/sum(data)), log.base))
}
}
}
if(mode == "Unbiased"){
if(is.null(ncol(data))==F){
if(missing(log.base)){
H <- apply(data, 2, function(x) (-sum((x[x>0]/sum(x))*log(x[x>0]/sum(x))))-((length(x[x>0])-1)/(2*sum(x))))
}else{
H <- apply(data, 2, function(x) (-sum((x[x>0]/sum(x))*log((x[x>0]/sum(x)), log.base)))-((length(x[x>0])-1)/(2*sum(x))))
}
}
if(is.null(ncol(data))==T){
if(missing(log.base)){
H <- (-sum((data[data>0]/sum(data))*log(data[data>0]/sum(data))))-((length(data[data>0])-1)/(2*sum(data)))
}else{
H <- (-sum((data[data>0]/sum(data))*log((data[data>0]/sum(data)), log.base)))-((length(data[data>0])-1)/(2*sum(data)))
}
}
}
if (std == F){
return(H)
}else{
if (length(H) > 1){
S <- apply(data, 2, function(x) sum(x > 0))
}else{
S <- sum(data > 0)
}
if (missing(log.base)){
return(H/log(S))
}else{
return(H/log(S, base = log.base))
}
}
}
shannon(c(1, 2, 3, 4), std = T)
shannon(c(1, 2, 3, 4, 0), std = T)
shannon(as.data.frame(matrix(c(1, 2, 3, 4, 2, 3, 0, 0, ))), std = T)
shannon(winter_birds)
?`%in%`
remove(shannon)
dim(matrix(NA, nrow=2, ncol = 3))
names(a) <- c("a", "b", "c")
names(b) <- c("b", "c", "d")
names(c) <- c("d", "e", "f")
a <- c(1, 2, 3, 4)
b <- c(1, 2, 3, 4)
c <- c(1, 2, 3, 4)
names(a) <- c("a", "b", "c")
names(b) <- c("b", "c", "d")
names(c) <- c("d", "e", "f")
align.by.names(list(a, b, c))
align.by.names <- function(l){
lnames <- numeric(0)
for (i in 1:length(l)){
lnames <- c(lnames, names(l[[i]]))
}
lnames <- unique(lnames)
m <- matrix(0, nrow = length(lnames), ncol = length(l))
colnames(m) <- 1:length(l)
rownames(m) <- lnames
for (i in 1:length(l)){
for (j in names(l[[i]])){
m[j, i] <- l[[i]][j]
}
}
m
}
align.by.names(list(a, b, c))
list(a, b, c)
a <- c(1, 2, 3, 4)
b <- c(1, 2, 3, 4)
c <- c(1, 2, 3, 4)
names(a) <- c("a", "b", "c", "d")
names(b) <- c("b", "c", "d", "e")
names(c) <- c("d", "e", "f", "g")
align.by.names(list(a, b, c))
remove(a)
remove(b)
remove(c)
remove(align.by.names())
remove(align.by.names
)
`%!in%` <- function(x,y){
!(`%in%`(x,y))
}
remove(`%!in%`)
